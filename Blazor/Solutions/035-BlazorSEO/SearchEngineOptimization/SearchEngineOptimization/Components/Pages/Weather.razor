@page "/weather"
@* 
    Stream Rendering is disabled in this case, because crawlers might not wait the otherwise simulated
    500 milliseconds for the page to load. So in this case this would be better Search Engine Optimization.
    
    However, remember that in a real world scenario, you would still need stream rendering, since you can
    never know how long a page will take to load, and you want to provide the best user experience. That is
    why stream rendering is enabled by default. Otherwise, you would have to wait for the whole page to load.
*@
@* @attribute [StreamRendering] *@

<PageTitle>Weather</PageTitle>
<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (WeatherForecast forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected sealed override void OnInitialized()
    {
        DateOnly startDate = DateOnly.FromDateTime(DateTime.Now);
        string[] summaries = [ "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" ];
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private sealed class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
