@if (CurrentRoom is not null)
{
    <h3 class="text-2xl font-bold py-2">@CurrentRoom.RoomName</h3>

    if (CurrentRoom.Players.Count < 2)
    {
        <h4>Waiting for another player to join...</h4>
    }

    if (!CurrentRoom.Game.GameStarted
        && CurrentRoom.Game.PlayerXId != myPlayerId
        && CurrentRoom.Players.Count == 2)
    {
        <h4>Waiting for the other player to start the game.</h4>
    }

    if (CurrentRoom.Game.GameOver && !CurrentRoom.Game.IsDraw)
    {
        <h4>Game Over! Winner: @CurrentRoom.Game.Winner</h4>
    }

    if (CurrentRoom.Game.GameOver && CurrentRoom.Game.IsDraw)
    {
        <h4>Game Over! Draw!</h4>
    }

    if ((!CurrentRoom.Game.GameStarted
        || CurrentRoom.Game.GameOver)
        && CurrentRoom.Game.PlayerXId == myPlayerId
        && CurrentRoom.Players.Count == 2)
    {
        <button @onclick="StartGame" class="m-2 p-2 rounded-md bg-blue-400">
            Start Game
        </button>
    }

    if (CurrentRoom.Game.GameStarted)
    {
        if (!CurrentRoom.Game.GameOver)
        {
            <h4>It's @CurrentRoom.Game.CurrentPlayerSymbol's Turn</h4>
        }

        <br />

        if (CurrentRoom.Game.GameOver)
        {
            <span>Thanks for playing, @CurrentRoom.Players[0].Name and @CurrentRoom.Players[1].Name!</span>
        }
        else
        {
            <span>Currently playing: @CurrentRoom.Players[0].Name (X), @CurrentRoom.Players[1].Name (O)</span>
        }
        
        <div class="flex justify-center items-center p-4">
            <table class="tic-tac-toe">
                @for (int row = 0; row < 3; row++)
                {
                    <tr>
                        @for (int col = 0; col < 3; col++)
                        {
                            int r = row;
                            int c = col;
                            <td @onclick="() => MakeMove(r, c)">
                                @CurrentRoom.Game.Board[r][c]
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>

        @if (!IsMyTurn() && !CurrentRoom.Game.GameOver)
        {
            <p>Please wait for the other player to make a move.</p>
        }
    }
}

@code {
    private string? myPlayerId;

    [CascadingParameter]
    public HubConnection? HubConnection { get; set; }

    [Parameter]
    public GameRoom? CurrentRoom { get; set; }

    protected sealed override void OnInitialized()
    {
        if (CurrentRoom is null
            || HubConnection is null
            || HubConnection.ConnectionId is null)
        {
            return;
        }

        myPlayerId = HubConnection.ConnectionId;

        HubConnection.On<Player>("PlayerJoined", player =>
        {
            CurrentRoom.Players.Add(player);
            StateHasChanged();
        });

        HubConnection.On<GameRoom>("UpdateGame", serverRoom =>
        {
            CurrentRoom = serverRoom;
            StateHasChanged();
        });
    }

    private async Task StartGame()
    {
        if (HubConnection is null || CurrentRoom is null)
        {
            return;
        }

        await HubConnection.InvokeAsync("StartGame", CurrentRoom.RoomId);
    }

    private async Task MakeMove(int row, int col)
    {
        if (IsMyTurn()
            && CurrentRoom is not null
            && CurrentRoom.Game.GameStarted
            && !CurrentRoom.Game.GameOver
            && HubConnection is not null)
        {
            await HubConnection!.InvokeAsync("MakeMove",
                CurrentRoom!.RoomId,
                row,
                col,
                myPlayerId);
        }
    }

    private bool IsMyTurn()
    {
        if (CurrentRoom is null)
        {
            return false;
        }

        return myPlayerId == CurrentRoom.Game.CurrentPlayerId;
    }
}
