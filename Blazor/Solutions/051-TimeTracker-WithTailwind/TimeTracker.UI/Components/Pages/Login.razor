@page "/login"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>TimeTracker | Login</PageTitle>

<div class="lg:px-80">

    <h3>Login</h3>

    <EditForm Model="loginRequest" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
    
        <LibInputText Label="Name" Id="name" @bind-Value="loginRequest.UserName" 
                     ValidationFor="() => loginRequest.UserName" />
        <LibInputText Label="Password" Id="password" @bind-Value="loginRequest.Password"
                     ValidationFor="() => loginRequest.Password" Type="password" />

        <LibButton Text="Login" Type="submit" AddMarginTop />
    </EditForm>
</div>

@if (loginFailed)
{
    <div>
        <span class="text-xs text-red-600 font-bold my-1">@errorMessage</span>
    </div>
}

@code {
    LoginRequestDto loginRequest = new();
    bool loginFailed = false;
    string errorMessage = string.Empty;

    async Task HandleSubmit()
    {
        loginFailed = false;
        LoginResponseDto response = await AuthService.Login(loginRequest);

        if (!response.IsSuccessful && response.Error is not null)
        {
            errorMessage = response.Error;
            loginFailed = true;
        }
        else if (!response.IsSuccessful)
        {
            errorMessage = "An unexpected error occurred";
            loginFailed = true;
        }
    }
}
