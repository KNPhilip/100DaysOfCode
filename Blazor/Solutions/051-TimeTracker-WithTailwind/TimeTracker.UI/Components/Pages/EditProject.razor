@page "/project"
@page "/project/{id:int}"
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable
@attribute [Authorize]

<div class="lg:px-80">
    @if (Id is null)
    {
        <PageTitle>TimeTracker | Create Project</PageTitle>
        <h3>Create a new Project</h3>
    }
    else
    {
        <PageTitle>TimeTracker | Edit "@project.Name"</PageTitle>
        <h3>Edit the "@project.Name" project</h3>
    }

    <EditForm Model="project" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />

        <LibInputText Id="name" Label="Name" @bind-Value="project.Name" ValidationFor="() => project.Name" />
        <LibInputTextArea Id="description" Label="Description" @bind-Value="project.Description" 
                         ValidationFor="() => project.Description" />
        <LibInputDateNullable Id="startDate" Label="Start" @bind-Value="project.StartDate" 
                             ValidationFor="() => project.StartDate" />
        <LibInputDateNullable Id="endDate" Label="End" @bind-Value="project.EndDate"
                             ValidationFor="() => project.EndDate" />

        <div class="flex gap-4">
            @if (Id is not null)
            {
                <LibButton Text="Delete" Level="LibButton.ButtonLevel.Danger" AddMarginTop OnClick="DeleteProject" />
            }
            <LibButton Text="Submit" Type="submit" AddMarginTop />
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    ProjectRequestDto project = new() { Name = string.Empty };

    protected sealed override void OnInitialized()
    {
        ProjectService.OnChange += StateHasChanged;
    }

    protected async sealed override Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            ProjectResponseDto result = await ProjectService.GetProjectById((int)Id);
            project = result.Adapt<ProjectRequestDto>();
        }
    }

    async Task HandleSubmit()
    {
        if (Id is null)
        {
            await ProjectService.CreateProject(project);
            NavigationManager.NavigateTo("/projects");
        }
        else
        {
            await ProjectService.UpdateProject((int)Id, project);
            NavigationManager.NavigateTo("/projects");
        }
    }

    async Task DeleteProject()
    {
        bool confirmed = await JSRuntime
            .InvokeAsync<bool>("confirm", "Do you really want to delete this project?");

        if (Id is not null && confirmed)
        {
            await ProjectService.DeleteProject((int)Id);
            NavigationManager.NavigateTo("/projects");
        }
    }

    public void Dispose()
    {
        ProjectService.OnChange -= StateHasChanged;
    }
}
