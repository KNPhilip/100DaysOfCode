@page "/weather"
@inject IStringLocalizer<Resource> localizer

<PageTitle>@localizer["Weather"]</PageTitle>

<h1>@localizer["Weather"]</h1>

<p>@localizer["This component demonstrates showing data"].</p>

@if (forecasts is not null)
{
    <table class="table">
        <thead>
            <tr>
                <th>@localizer["Date"]</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>@localizer["Summary"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (WeatherForecast forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected sealed override void OnInitialized()
    {
        DateOnly startDate = DateOnly.FromDateTime(DateTime.Now);
        string[] summaries = [ "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" ];
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private sealed class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
