@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@inject ITimeEntryService TimeEntryService

@if (Type == TimeEntryTabs.TimeEntryFilterType.Day)
{
    <input type="date" 
        @bind-value="now" 
        @bind-value:event="oninput"
        @onchange="HandleDateSelection"
           class="@Css" />
}
else if (Type == TimeEntryTabs.TimeEntryFilterType.Month)
{
    <input type="month"
           @bind-value="now"
           @bind-value:event="oninput"
           @onchange="HandleMonthSelection"
           class="@Css" />
}
else if (Type == TimeEntryTabs.TimeEntryFilterType.Year)
{
    <input type="number" min="1900" max="2099" step="1"
           @bind-value="currentYear"
           @bind-value:event="oninput"
           @onchange="HandleYearSelection"
               class="@Css" />
}
else if (Type == TimeEntryTabs.TimeEntryFilterType.Project)
{
    <ProjectSelector />
}

@code {
    [Parameter]
    public TimeEntryTabs.TimeEntryFilterType Type { get; set; } = TimeEntryTabs.TimeEntryFilterType.Day;
    private DateTime now = DateTime.Now;
    private int currentYear = DateTime.Now.Year;
    private string Css = "mt-2 p-2 rounded-md border-gray-200 shadow-sm sm:text-sm";

    private async Task HandleDateSelection(ChangeEventArgs e)
    {
        if (e.Value is not null && DateTime.TryParse(e.Value.ToString(), out DateTime date))
        {
            await TimeEntryService.GetTimeEntriesByDayAsync(date.Year, date.Month, date.Day);
        }
    }

    private async Task HandleMonthSelection(ChangeEventArgs e)
    {
        if (e.Value is not null && DateTime.TryParse(e.Value.ToString(), out DateTime date))
        {
            await TimeEntryService.GetTimeEntriesByMonthAsync(date.Year, date.Month);
        }
    }

    private async Task HandleYearSelection(ChangeEventArgs e)
    {
        if (e.Value is not null && Int32.TryParse(e.Value.ToString(), out int year))
        {
            await TimeEntryService.GetTimeEntriesByYearAsync(year);
        }
    }
}
